{
  "schemaVersion": "2.2",
  "description": "Install, update, or remove the New Relic Infrastructure agent. SSM agent is required to be already installed on the OS. Infrastructure supports these operating systems: Amazon Linux all versions, CentOS version 6 or higher, Debian version 7 (Wheezy) or higher, Red Hat Enterprise Linux (RHEL) version 6 or higher, Ubuntu versions 12.04.*, 14.04.*, and 16.04.* (LTS  versions), and Windows Server 2008, 2012, 2016, and 2019 and their service packs. - by Kevin Downs http://linkedin.com/in/kevin-downs",
  "parameters": {
    "action": {
      "type": "String",
      "default": "Install",
      "description": "(Required) Install, update, or remove. Note: update only updates the Infrastructure agent, it doesn't update or change the agent configuration.",
      "allowedValues": [
        "Install",
        "Update",
        "Remove"
      ]
    },
    "licenseKeyParameterName": {
      "type": "String",
      "description": "(Required) Your New Relic license parameter store name.",
      "maxChars": 100
    },
    "agentFileLocation": {
      "type": "String",
      "default": "",
      "description": "(Optional) Only use if you need to install the agent from a non-internet connected instance. Examples: c:\\temp\\newrelic-infra.msi or https://s3.us-east-2.amazonaws.com/mybucket/newrelic-infra.repo",
      "maxChars": 1024
    },
    "displayName": {
      "type": "String",
      "default": "",
      "description": "(Optional) Override the auto-generated hostname for reporting. This is useful when you have multiple hosts with the same name, since Infrastructure uses the hostname as the unique identifier for each host.",
      "maxChars": 1024
    },
    "proxy": {
      "type": "String",
      "default": "",
      "description": "(Optional) Your system may have firewall rules that require the agent to use a proxy to communicate with New Relic. If so, set the proxy URL in the form https://user:password@hostname:port. Can be HTTP or HTTPS.",
      "maxChars": 1024
    },
    "verbose": {
      "type": "String",
      "default": "0",
      "description": "(Optional) When set to 1, enables verbose logging for the agent. This is useful when troubleshooting the agent. When verbose logging is not set to 1, it defaults to off. See also log_file to customize the log file location.",
      "allowedValues": [
        "0",
        "1"
      ]
    },
    "logFile": {
      "type": "String",
      "default": "",
      "description": "(Optional) To log to another location, provide a full path and file name.",
      "maxChars": 1024
    },
    "logToStdout": {
      "type": "String",
      "default": "true",
      "description": "(Optional) When this option is true or not explicitly set, the agent logs to the console, which is typically configured to write to system log files. If you have a log file set through the log_file option, the agent writes to both the specified file and the console when log_to_stdout is true or not explicitly set. Setting this option to false restricts output to the specified file only.",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "customAttributeOneName": {
      "type": "String",
      "default": "",
      "description": "(Optional) A custom attributes is used to annotate the data from this agent instance. Example: environment",
      "maxChars": 1024
    },
    "customAttributeOneValue": {
      "type": "String",
      "default": "",
      "description": "(Optional) A custom attributes is used to annotate the data from this agent instance. Example: production",
      "maxChars": 1024
    },
    "customAttributeTwoName": {
      "type": "String",
      "default": "",
      "description": "(Optional) A custom attributes is used to annotate the data from this agent instance. Example: service",
      "maxChars": 1024
    },
    "customAttributeTwoValue": {
      "type": "String",
      "default": "",
      "description": "(Optional) A custom attributes is used to annotate the data from this agent instance. Example: login service",
      "maxChars": 1024
    },
    "customAttributeThreeName": {
      "type": "String",
      "default": "",
      "description": "(Optional) A custom attributes is used to annotate the data from this agent instance. Example: team",
      "maxChars": 1024
    },
    "customAttributeThreeValue": {
      "type": "String",
      "default": "",
      "description": "(Optional) A custom attributes is used to annotate the data from this agent instance. Example: alpha-team",
      "maxChars": 1024
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "name": "LinuxInstallNewRelicInfrastructureAgent",
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "# Get Linux OS and Version",
          "if [ -f /etc/os-release ]; then",
          "# freedesktop.org and systemd",
          ". /etc/os-release",
          "OS=$NAME",
          "VER=$VERSION_ID",
          "elif type lsb_release >/dev/null 2>&1; then",
          "# linuxbase.org",
          "OS=$(lsb_release -si)",
          "VER=$(lsb_release -sr)",
          "elif [ -f /etc/lsb-release ]; then",
          "# For some versions of Debian/Ubuntu without lsb_release command",
          ". /etc/lsb-release",
          "OS=$DISTRIB_ID",
          "VER=$DISTRIB_RELEASE",
          "elif [ -f /etc/debian_version ]; then",
          "# Older Debian/Ubuntu/etc.",
          "OS=Debian",
          "VER=$(cat /etc/debian_version)",
          "elif [ -f /etc/redhat-release ]; then",
          "# Older Red Hat, CentOS, etc.",
          "OS=$(cat /etc/redhat-release | cut -d ' ' -f 1)",
          "VER=$(cat /etc/redhat-release | cut -d ' ' -f 3)",
          "else",
          "# Fall back to uname, e.g. Linux <version>, also works for BSD, etc.",
          "OS=$(uname -s)",
          "VER=$(uname -r)",
          "fi",
          "# For Amazon Linux v1 & 2",
          "if [[ $OS == *\"Amazon\"* ]]; then",
          "# For Amazon Linux v2",
          "if [[ $VER == \"2\" ]]; then",
          "echo \"Amazon Linux v2\"",
          "OSCHECK=2",
          "else",
          "echo \"Amazon Linux v1\"",
          "OSCHECK=1",
          "fi",
          "# For CentOS 6 or RHEL 6",
          "elif [[ $OS == *\"CentOS\"* ]] && [ ${VER:0:1} == \"6\" ]; then",
          "echo \"CentOS 6\"",
          "OSCHECK=1",
          "elif [[ $OS == *\"Red\"* ]] && [ ${VER:0:1} == \"6\" ]; then",
          "echo \"Red Hat 6\"",
          "OSCHECK=1",
          "# For CentOS 7 or RHEL 7",
          "elif [[ $OS == *\"CentOS\"* ]] && [ ${VER:0:1} == \"7\" ]; then",
          "echo \"CentOS 7\"",
          "OSCHECK=2",
          "elif [[ $OS == *\"Red\"* ]] && [ ${VER:0:1} == \"7\" ]; then",
          "echo \"Red Hat 7\"",
          "OSCHECK=2",
          "# For CentOS 8 or RHEL 8",
          "elif [[ $OS == *\"CentOS\"* ]] && [ ${VER:0:1} == \"8\" ]; then",
          "echo \"CentOS 8\"",
          "OSCHECK=3",
          "elif [[ $OS == *\"Red\"* ]] && [ ${VER:0:1} == \"8\" ]; then",
          "echo \"Red Hat 8\"",
          "OSCHECK=3",
          "# For Ubuntu 12 - Precise",
          "elif [[ $OS == *\"Ubuntu\"* ]] && [ ${VER:0:2} == \"12\" ]; then",
          "echo \"Ubuntu 12 - Precise\"",
          "OSCHECK=4",
          "# For Ubuntu 14 - Trusty",
          "elif [[ $OS == *\"Ubuntu\"* ]] && [ ${VER:0:2} == \"14\" ]; then",
          "echo \"Ubuntu 14 - Trusty\"",
          "OSCHECK=5",
          "# For Ubuntu 16 - Xenial",
          "elif [[ $OS == *\"Ubuntu\"* ]] && [ ${VER:0:2} == \"16\" ]; then",
          "echo \"Ubuntu 16 - Xenial\"",
          "OSCHECK=6",
          "# For Ubuntu 18 - Bionic",
          "elif [[ $OS == *\"Ubuntu\"* ]] && [ ${VER:0:2} == \"18\" ]; then",
          "echo \"Ubuntu 18 - Bionic\"",
          "OSCHECK=7",
          "else",
          "echo \"Unsupported OS\"",
          "OSCHECK=0",
          "fi",

          "# Add The JQ ",
          "rpm -q jq",
          "if [ $? -ne 0 ]; then",
          "sudo yum install jq -y",
          "fi",
          "## IMDSv2 ##",
          "TOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`",
          "REGION=`curl -H \"X-aws-ec2-metadata-token: $TOKEN\" -v http://169.254.169.254/latest/meta-data/placement/region`",
          "echo $REGION",
          
          "NR_LICENSE=$(aws ssm get-parameter --name {{ licenseKeyParameterName }} --with-decryption --region $REGION | jq -r .Parameter.Value)",
          "echo ${NR_LICENSE}",
          
          "# Add the New Relic License key and any configuration parameters",
          "if [ '{{ action }}' == 'Install' ]; then",
          "echo \"license_key: ${NR_LICENSE}\" | sudo tee /etc/newrelic-infra.yml",
          
          "#exit 0",
          
          "# If entered, set the Display name",
          "if [ '{{ displayName }}' != '' ]; then",
          "echo \"display_name: {{displayName}}\" | sudo tee -a /etc/newrelic-infra.yml",
          "fi",
          "# If entered, set the Proxy",
          "if [ '{{ proxy }}' != '' ]; then",
          "echo \"proxy: {{proxy}}\" | sudo tee -a /etc/newrelic-infra.yml",
          "fi",
          "# Set verbose",
          "echo \"verbose: {{verbose}}\" | sudo tee -a /etc/newrelic-infra.yml",
          "# If entered, set the Log File",
          "if [ '{{ logFile }}' != '' ]; then",
          "echo \"log_file: {{logFile}}\" | sudo tee -a /etc/newrelic-infra.yml",
          "fi",
          "# Set log to stdout",
          "echo \"log_to_stdout: {{logToStdout}}\" | sudo tee -a /etc/newrelic-infra.yml",
          "# If entered, set custom attribute(s)",
          "if [ '{{ customAttributeOneName }}' != '' ]; then",
          "if [ '{{ customAttributeOneValue }}' != '' ]; then",
          "echo \"custom_attributes:\" | sudo tee -a /etc/newrelic-infra.yml",
          "echo \"  {{customAttributeOneName}}: {{customAttributeOneValue}}\" | sudo tee -a /etc/newrelic-infra.yml",
          "fi",
          "fi",
          "if [ '{{ customAttributeOneName }}' != '' ]; then",
          "if [ '{{ customAttributeTwoName }}' != '' ]; then",
          "if [ '{{ customAttributeTwoValue }}' != '' ]; then",
          "echo \"  {{customAttributeTwoName}}: {{customAttributeTwoValue}}\" | sudo tee -a /etc/newrelic-infra.yml",
          "fi",
          "fi",
          "fi",
          "if [ '{{ customAttributeOneName }}' != '' ]; then",
          "if [ '{{ customAttributeThreeName }}' != '' ]; then",
          "if [ '{{ customAttributeThreeValue }}' != '' ]; then",
          "echo \"  {{customAttributeThreeName}}: {{customAttributeThreeValue}}\" | sudo tee -a /etc/newrelic-infra.yml",
          "fi",
          "fi",
          "fi",
          "case $OSCHECK in",
          "\"1\")",
          "# Amazon Linux v1 or CentOS 6 or RHEL 6",
          "curl -o /etc/yum.repos.d/newrelic-infra.repo https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64/newrelic-infra.repo",
          "yum -q makecache -y --disablerepo='*' --enablerepo='newrelic-infra'",
          "yum install newrelic-infra -y",
          ";;",
          "\"2\")",
          "# CentOS 7 or RHEL 7 or Amazon Linux v2",
          "curl -o /etc/yum.repos.d/newrelic-infra.repo https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64/newrelic-infra.repo",
          "yum -q makecache -y --disablerepo='*' --enablerepo='newrelic-infra'",
          "yum install newrelic-infra -y",
          ";;",
          "\"3\")",
          "# CentOS 8 or RHEL 8",
          "curl -o /etc/yum.repos.d/newrelic-infra.repo https://download.newrelic.com/infrastructure_agent/linux/yum/el/8/x86_64/newrelic-infra.repo",
          "yum -q makecache -y --disablerepo='*' --enablerepo='newrelic-infra'",
          "yum install newrelic-infra -y",
          ";;",
          "\"4\")",
          "# Ubuntu 12 - Precise",
          "curl https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg | sudo apt-key add -",
          "printf \"deb [arch=amd64] https://download.newrelic.com/infrastructure_agent/linux/apt precise main\" | sudo tee -a /etc/apt/sources.list.d/newrelic-infra.list",
          "sudo apt-get update",
          "sudo apt-get install newrelic-infra -y",
          ";;",
          "\"5\")",
          "# Ubuntu 14 - Trusty",
          "curl https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg | sudo apt-key add -",
          "printf \"deb [arch=amd64] https://download.newrelic.com/infrastructure_agent/linux/apt trusty main\" | sudo tee -a /etc/apt/sources.list.d/newrelic-infra.list",
          "sudo apt-get update",
          "sudo apt-get install newrelic-infra -y",
          ";;",
          "\"6\")",
          "# Ubuntu 16 - Xenial",
          "curl https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg | sudo apt-key add -",
          "printf \"deb [arch=amd64] https://download.newrelic.com/infrastructure_agent/linux/apt xenial main\" | sudo tee -a /etc/apt/sources.list.d/newrelic-infra.list",
          "sudo apt-get update",
          "sudo apt-get install newrelic-infra -y",
          ";;",
          "\"7\")",
          "# Ubuntu 18 - Bionic",
          "curl https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg | sudo apt-key add -",
          "printf \"deb [arch=amd64] https://download.newrelic.com/infrastructure_agent/linux/apt bionic main\" | sudo tee -a /etc/apt/sources.list.d/newrelic-infra.list",
          "sudo apt-get update",
          "sudo apt-get install newrelic-infra -y",
          ";;",
          "*)",
          "esac",
          "# Update the New Relic Infrastructure agent",
          "elif [ '{{ action }}' == 'Update' ]; then",
          "if [ $OSCHECK == '1' ] || [ $OSCHECK -eq '2' ] || [ $OSCHECK -eq '3' ]; then",
          "sudo yum update newrelic-infra -y",
          "else",
          "sudo apt-get update && sudo apt-get install --only-upgrade newrelic-infra -y",
          "fi",
          "# Remove the New Relic Infrastructure agent",
          "elif [ '{{ action }}' == 'Remove' ]; then",
          "if [ $OSCHECK ==  '1' ] || [ $OSCHECK == '2' ] || [ $OSCHECK -eq '3' ]; then",
          "sudo yum remove newrelic-infra -y",
          "else",
          "sudo apt-get remove -y newrelic-infra",
          "fi",
          "fi"
        ]
      }
    }
  ]
}